#!/usr/bin/env python
# -*- coding: utf-8 -*-
#HW3 for RBE 595/CS 525 Motion Planning
import time
import openravepy

#### YOUR IMPORTS GO HERE ####
import sys
#### END OF YOUR IMPORTS ####

if not __openravepy_build_doc__:
    from openravepy import *
    from numpy import *

def waitrobot(robot):
    """busy wait for robot completion"""
    while not robot.GetController().IsDone():
        time.sleep(0.01)

def tuckarms(env,robot):
    with env:
        jointnames = ['l_shoulder_lift_joint','l_elbow_flex_joint','l_wrist_flex_joint','r_shoulder_lift_joint','r_elbow_flex_joint','r_wrist_flex_joint']
        robot.SetActiveDOFs([robot.GetJoint(name).GetDOFIndex() for name in jointnames])
        robot.SetActiveDOFValues([1.29023451,-2.32099996,-0.69800004,1.27843491,-2.32100002,-0.69799996]);        
        robot.GetController().SetDesired(robot.GetDOFValues());
    waitrobot(robot)

if __name__ == "__main__":

    env = Environment()
    env.SetViewer('qtcoin')
    env.Reset()        
    # load a scene from ProjectRoom environment XML file
    env.Load('hw3.env.xml')
    #env.Load('empty.env.xml')
    time.sleep(0.1)

    # 1) get the 1st robot that is inside the loaded scene
    # 2) assign it to the variable named 'robot'
    robot = env.GetRobots()[0]

    ### INITIALIZE YOUR PLUGIN HERE ###

    #!/usr/bin/env python

    RaveInitialize()
    RaveLoadPlugin('myplugin/build/myplugin')

    ### END INITIALIZING YOUR PLUGIN ###
   

    # tuck in the PR2's arms for driving
    tuckarms(env,robot);

    #set active joints
    jointnames =['l_shoulder_pan_joint','l_shoulder_lift_joint','l_elbow_flex_joint','l_upper_arm_roll_joint','l_forearm_roll_joint','l_wrist_flex_joint','l_wrist_roll_joint']
    robot.SetActiveDOFs([robot.GetJoint(name).GetDOFIndex() for name in jointnames])        

    # set start config
    startconfig = [-0.15,0.075,-1.008,0,0,0,0]
    robot.SetActiveDOFValues(startconfig);        
    robot.GetController().SetDesired(robot.GetDOFValues());
    waitrobot(robot)

    with env:
        goalconfig = [0.449,-0.201,0,0,0,0,0]

        ### YOUR CODE HERE ###
        ###call your plugin to plan, draw, and execute a path from the current configuration of the left arm to the goalconfig
        
        robot_weights = [0.491099, 0.08705757,  0.06498835,  0.04085778,  0.03327996,  0.05081965, 0.01457205];
        #robot joint weights generated by
        '''
        lmodel = databases.linkstatistics.LinkStatisticsModel(robot)
        if not lmodel.load():
            lmodel.autogenerate()
        lmodel.setRobotWeights()
        print _probot.GetActiveJointWeights()
        '''

        RRT = RaveCreateModule(env,'RRT')
        goal_string = str(goalconfig).strip('[').strip(']')
        weight_string = str(robot_weights).strip('[').strip(']')

        bidirect = sys.argv[1];
        goal_bias = sys.argv[2]

        RRT.SendCommand("Set_Joint_Weights " + weight_string.replace(',', ''))
        RRT.SendCommand("Set_Bidirectional " + bidirect)
        RRT.SendCommand("Set_Goal_Bias "+ goal_bias)
        RRT.SendCommand("Start_RRT " + goal_string.replace(',', ''))

        ### END OF YOUR CODE ###
    waitrobot(robot)
    RaveDestroy()

    #raw_input("Press enter to exit...")